{"version":3,"sources":["pages/ForgotPassword.js","hooks/useLoginSubmit.js","assets/img/forgot-password-office.jpeg","assets/img/forgot-password-office-dark.jpeg"],"names":["ForgotPassword","onSubmit","register","handleSubmit","errors","loading","useLoginSubmit","_jsx","className","children","_jsxs","src","ImageLight","alt","ImageDark","LabelArea","label","InputArea","name","type","placeholder","Error","errorName","verifyEmail","Button","disabled","block","Link","to","setLoading","useState","dispatch","useContext","AdminContext","history","useHistory","location","useLocation","formState","useForm","_ref","email","phone","password","role","pathname","AdminServices","loginAdmin","then","res","token","console","log","Cookies","set","JSON","stringify","expires","notifySuccess","payload","localStorage","setItem","replace","catch","err","error","notifyError","response","data","message","registerAdmin","forgetPassword"],"mappings":"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","file":"static/js/33.0c58f41d.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Button } from \"@windmill/react-ui\";\nimport Error from \"components/form/Error\";\nimport useLoginSubmit from \"hooks/useLoginSubmit\";\nimport LabelArea from \"components/form/LabelArea\";\nimport InputArea from \"components/form/InputArea\";\nimport ImageLight from \"assets/img/forgot-password-office.jpeg\";\nimport ImageDark from \"assets/img/forgot-password-office-dark.jpeg\";\n\nconst ForgotPassword = () => {\n  const { onSubmit, register, handleSubmit, errors, loading } = useLoginSubmit();\n\n  return (\n    <div className=\"flex items-center min-h-screen p-6 bg-gray-50 dark:bg-gray-900\">\n      <div className=\"flex-1 h-full max-w-4xl mx-auto overflow-hidden bg-white rounded-lg shadow-xl dark:bg-gray-800\">\n        <div className=\"flex flex-col overflow-y-auto md:flex-row\">\n          <div className=\"h-32 md:h-auto md:w-1/2\">\n            <img\n              aria-hidden=\"true\"\n              className=\"object-cover w-full h-full dark:hidden\"\n              src={ImageLight}\n              alt=\"Office\"\n            />\n            <img\n              aria-hidden=\"true\"\n              className=\"hidden object-cover w-full h-full dark:block\"\n              src={ImageDark}\n              alt=\"Office\"\n            />\n          </div>\n          <main className=\"flex items-center justify-center p-6 sm:p-12 md:w-1/2\">\n            <div className=\"w-full\">\n              <h1 className=\"mb-4 text-xl font-semibold text-gray-700 dark:text-gray-200\">\n                Forgot password\n              </h1>\n\n              <form onSubmit={handleSubmit(onSubmit)}>\n                <LabelArea label=\"Email\" />\n                <InputArea\n                  register={register}\n                  label=\"Email\"\n                  name=\"verifyEmail\"\n                  type=\"email\"\n                  placeholder=\"john@doe.com\"\n                />\n                <Error errorName={errors.verifyEmail} />\n\n                <Button disabled={loading} type=\"submit\" block className=\"mt-4 h-12\">\n                  Recover password\n                </Button>\n              </form>\n              <p className=\"mt-4\">\n                <Link\n                  className=\"text-sm font-medium text-green-500 dark:text-green-400 hover:underline\"\n                  to=\"/login\"\n                >\n                  Already have an account? Login\n                </Link>\n              </p>\n            </div>\n          </main>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ForgotPassword;\n","// import Cookies from 'js-cookie';\n// import { useContext, useState } from 'react';\n// import { useForm } from 'react-hook-form';\n// import { useHistory, useLocation } from 'react-router-dom';\n// import { AdminContext } from 'context/AdminContext';\n// import AdminServices from 'services/AdminServices';\n// import { notifyError, notifySuccess } from 'utils/toast';\n\n// const useLoginSubmit = () => {\n//   const [loading, setLoading] = useState(false);\n//   const { dispatch } = useContext(AdminContext);\n//   const history = useHistory();\n//   const location = useLocation();\n//   const {\n//     register,\n//     handleSubmit,\n//     formState: { errors },\n//   } = useForm();\n\n//   const onSubmit = ({ name, email, verifyEmail, password, role }) => {\n//     setLoading(true);\n//     const cookieTimeOut = 0.5;\n\n//     if (location.pathname === '/login') {\n//       AdminServices.loginAdmin({ email, password })\n//         .then((res) => {\n//           if (res) {\n//             console.log('Login response:', res);\n//             Cookies.set('adminInfo', JSON.stringify(res), {\n//               expires: cookieTimeOut,\n//             });\n//           }\n//         })\n//         .catch((err) => {\n//           console.error('Login error:', err);\n//           notifyError(err ? err.response.data.message : err.message);\n//           setLoading(false);\n//         });\n//       setLoading(false);\n//       notifySuccess('Login Success!');\n//       dispatch({ type: 'USER_LOGIN', payload: { email: email } });\n//       localStorage.setItem(\"email\", email)\n//       history.replace('/');\n//     }\n\n//     if (location.pathname === '/signup') {\n//       AdminServices.registerAdmin({ name, email, password, role })\n//         .then((res) => {\n//           if (res) {\n//             setLoading(false);\n//             notifySuccess('Register Success!');\n//             dispatch({ type: 'USER_LOGIN', payload: res });\n//             Cookies.set('adminInfo', JSON.stringify(res), {\n//               expires: cookieTimeOut,\n//             });\n//             history.replace('/');\n//           }\n//         })\n//         .catch((err) => {\n//           notifyError(err ? err.response.data.message : err.message);\n//           setLoading(false);\n//         });\n//     }\n\n//     if (location.pathname === '/forgot-password') {\n//       AdminServices.forgetPassword({ verifyEmail })\n//         .then((res) => {\n//           setLoading(false);\n//           notifySuccess(res.message);\n//         })\n//         .catch((err) => {\n//           setLoading(false);\n//           notifyError(err ? err.response.data.message : err.message);\n//         });\n//     }\n//   };\n//   return {\n//     onSubmit,\n//     register,\n//     handleSubmit,\n//     errors,\n//     loading,\n//   };\n// };\n\n// export default useLoginSubmit;\n\n\n\n// just trying to make user stay at login when its correct from tokens \nimport Cookies from 'js-cookie';\nimport { useContext, useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { AdminContext } from 'context/AdminContext';\nimport AdminServices from 'services/AdminServices';\nimport { notifyError, notifySuccess } from 'utils/toast';\n\nconst useLoginSubmit = () => {\n  const [loading, setLoading] = useState(false);\n  const { dispatch } = useContext(AdminContext);\n  const history = useHistory();\n  const location = useLocation();\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm();\n\n  const onSubmit = ({ name, email, phone, verifyEmail, password, role }) => {\n    setLoading(true);\n    const cookieTimeOut = 0.5;\n\n    if (location.pathname === '/login') {\n      AdminServices.loginAdmin({ email, password })\n        .then((res) => {\n          if (res && res.token) {\n            console.log('Login response:', res);\n            Cookies.set('adminInfo', JSON.stringify(res), {\n              expires: cookieTimeOut,\n            });\n            setLoading(false);\n            notifySuccess('Login Success!');\n            // dispatch({ type: 'USER_LOGIN', payload: { email: email } });\n            dispatch({ type: 'USER_LOGIN', payload: { token: res.token } });\n            localStorage.setItem(\"email\", email)\n            history.replace('/');\n          }\n        })\n        .catch((err) => {\n          console.error('Login error:', err);\n          notifyError(err ? err.response.data.message : err.message);\n          setLoading(false);\n        });\n    }\n\n    if (location.pathname === '/signup') {\n      AdminServices.registerAdmin({ name, email, phone, password, role })\n        .then((res) => {\n          if (res) {\n            setLoading(false);\n            notifySuccess('Register Success!');\n            dispatch({ type: 'USER_LOGIN', payload: res });\n            Cookies.set('adminInfo', JSON.stringify(res), {\n              expires: cookieTimeOut,\n            });\n            history.replace('/');\n          }\n        })\n        .catch((err) => {\n          notifyError(err ? err.response.data.message : err.message);\n          setLoading(false);\n        });\n    }\n    // Added by: Govinda 25/4/2024\n    if (location.pathname === '/forgot-password') {\n      console.log('Forgot Password form submitted:', verifyEmail);\n\n      AdminServices.forgetPassword({ verifyEmail })\n        .then((res) => {\n          setLoading(false);\n          console.log('Password reset response:', res);\n          notifySuccess(res.message);\n        })\n        .catch((err) => {\n          setLoading(false);\n          console.error('Password reset error:', err);\n          notifyError(err ? err.response.data.message : err.message);\n        });\n    }\n  };\n  return {\n    onSubmit,\n    register,\n    handleSubmit,\n    errors,\n    loading,\n  };\n};\n\nexport default useLoginSubmit;\n","export default __webpack_public_path__ + \"static/media/forgot-password-office.d1630a33.jpeg\";","export default __webpack_public_path__ + \"static/media/forgot-password-office-dark.d1630a33.jpeg\";"],"sourceRoot":""}