{"version":3,"sources":["services/CategoryServices.js","services/LanguageServices.js","services/AttributeServices.js","services/ProductServices.js","services/CurrencyServices.js","services/CouponServices.js","components/Typography/PageTitle.js","hooks/useFilter.js"],"names":["CategoryServices","getAllCategory","async","requests","get","getAllcategory","getCategoryById","id","addCategory","post","body","addAllCategory","updateCategory","put","updateStatus","deleteCategory","console","log","response","delete","error","updateManyCategory","ids","status","patch","deleteManyCategory","LanguageServices","getAllLanguages","getShowingLanguage","getLanguageById","addLanguage","addAllLanguage","updateLanguage","updateManyLanguage","deleteLanguage","deleteManyLanguage","AttributeServices","getAllAttributes","type","option","option1","_ref","getShowingAttributes","addAttribute","addAllAttributes","addChildAttributes","getAttributeById","updateAttributes","updateChildAttributes","_ref2","updateChildStatus","deleteAttribute","deleteChildAttribute","_ref3","updateManyAttribute","deleteManyAttribute","data","updateManyChildAttribute","deleteManyChildAttribute","socket","io","ProductServices","getAllProducts","getProductById","getProductBySlug","slug","addProduct","addAllProducts","updateProduct","updateManyProducts","emit","subscribeToStatusUpdates","callback","on","unsubscribeFromStatusUpdates","off","deleteProduct","deleteManyProducts","CurrencyServices","getAllCurrency","updatePriorities","currencies","getShowingCurrency","getCurrencyById","addCurrency","addAllCurrency","updateCurrency","updateManyCurrencies","updateEnabledStatus","updateLiveExchangeRateStatus","deleteCurrency","deleteManyCurrency","CouponServices","addCoupon","addAllCoupon","getAllCoupons","getCouponById","updateCoupon","updateManyCoupons","deleteCoupon","deleteManyCoupons","PageTitle","children","_jsx","className","categorySchema","properties","_id","name","description","icon","required","attributeSchema","title","variants","couponSchema","couponCode","endTime","discountPercentage","minimumAmount","productType","logo","discountType","customerSchema","email","useFilter","ajv","Ajv","allErrors","filter","setFilter","useState","sortedField","setSortedField","searchText","setSearchText","searchUser","setSearchUser","searchCoupon","setSearchCoupon","searchOrder","setSearchOrder","categoryType","setCategoryType","attributeTitle","setAttributeTitle","country","setCountry","zone","setZone","startDate","setStartDate","endDate","setEndDate","language","setLanguage","currency","setCurrency","pending","setPending","processing","setProcessing","delivered","setDelivered","setStatus","role","setRole","time","setTime","currentPage","setCurrentPage","resultsPerPage","setResultsPerPage","dataTable","setDataTable","todayOrder","setTodayOrder","monthlyOrder","setMonthlyOrder","totalOrder","setTotalOrder","selectedFile","setSelectedFile","filename","setFileName","isDisabled","setIsDisable","shipping","setShipping","newProducts","currencyRef","useRef","searchRef","userRef","couponRef","orderRef","categoryRef","attributeRef","countryRef","languageRef","taxRef","shippingRef","dayjs","isBetween","isToday","location","useLocation","lang","setIsUpdate","setLoading","useContext","SidebarContext","globalSetting","useAsync","SettingServices","getGlobalSetting","serviceData","useMemo","date","Date","setDate","getDate","services","map","el","newDate","updatedAt","toLocaleString","timeZone","default_time_zone","updatedDate","pathname","_services","_services2","_services3","_services4","_services5","_services6","orderPending","statusP","orderProcessing","statusO","orderDelivered","statusD","todayServices","order","createdAt","reduce","preValue","currentValue","total","monthlyServices","_services7","item","parent","sort","a","b","originalPrice","quantity","search","_search$title","toLowerCase","includes","_search$title$lang","_search$title$lang$to","_search$attribute","attribute","category","lowercaseCategoryType","some","child","staff","_search$name$lang","_search$phone","_search$email","phone","_search$title$lang2","_search$title$lang2$t","_search$couponCode","user_info","startDateObj","endDateObj","cou","_cou$name","_cou$iso_code","iso_code","ship","lan","isoCode","languageCode","language_code","cur","totalResults","length","useEffect","slicedData","startIndex","endIndex","Math","min","slice","endCount","handleChangePage","p","handleSubmitUser","e","preventDefault","current","value","handleSubmitForAll","handleSubmitCoupon","handleSubmitOrder","handleSubmitCategory","handleSubmitAttribute","handleOnDrop","i","push","handleUploadProducts","notifyError","then","res","notifySuccess","message","catch","err","handleSubmitCountry","handleSubmitLanguage","handleSelectFile","_e$target","fileReader","FileReader","file","target","files","readAsText","onload","text","JSON","parse","result","parentName","parentId","password","event","json","csvToJson","fromString","rABS","readAsBinaryString","bstr","wb","XLSX","bookVBA","wsname","SheetNames","ws","Sheets","sheet_to_json","readAsArrayBuffer","handleUploadMultiple","isBelowThreshold","validate","every","customerDataValidation","validationData","CustomerServices","addAllCustomers","handleRemoveSelectFile","setTimeout","handleSubmitCurrency","handleSubmitShipping"],"mappings":"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","file":"static/js/4.0eb9ff84.chunk.js","sourcesContent":["// // // import categoryData from \"utils/category\";\n// // import requests from \"./httpService\";\n\n// // const CategoryServices = {\n// //   getAllCategory: async () => {\n// //     return requests.get(\"/category\");\n// //     // return []\n// //     // return categoryData;\n// //   },\n\n// //   getAllcategory: async () => {\n// //     return requests.get(\"/category/all\");\n// //     // return []\n// //     // return categoryData;\n// //   },\n\n// //   getCategoryById: async (id) => {\n// //     return requests.get(`/category/${id}`);\n// //     // return [];\n\n// //   },\n\n// //   addCategory: async (body) => {\n// //     return requests.post(\"/category/add\", body);\n// //     // return [];\n\n// //   },\n\n// //   // addCategory: async (newCategory) => {\n// //   //   console.log(\"New Category:\", newCategory);\n// //   //   try {\n// //   //     await new Promise(resolve => setTimeout(resolve, 1000));\n// //   //     categoryData.push(newCategory);\n// //   //     console.log(\"Updated Category Data:\", categoryData);\n// //   //     return { success: true, message: \"Category added successfully\", data: newCategory };\n// //   //   } catch (error) {\n// //   //     console.error(\"Error adding category:\", error);\n// //   //     return { success: false, message: \"Failed to add category\" };\n// //   //   }\n// //   // },\n\n\n// //   addAllCategory: async (body) => {\n// //     return requests.post(\"/category/add/all\", body);\n// //     // return [];\n\n// //   },\n\n// //   updateCategory: async (id, body) => {\n// //     return requests.put(`/category/${id}`, body);\n// //   },\n\n// //   updateStatus: async (id, body) => {\n// //     return requests.put(`/category/status/${id}`, body);\n// //   },\n\n// //   deleteCategory: async (id) => {\n// //     //   try {\n// //     //     console.log(\"Deleting category with ID:\", id);\n// //     //     console.log(\"Before deletion:\", categoryData);\n// //     //     await new Promise(resolve => setTimeout(resolve, 1000));\n// //     //     categoryData = categoryData.filter(category => category._id !== id);\n// //     //     console.log(\"After deletion:\", categoryData);\n// //     //     return { success: true, message: \"Category deleted successfully\" };\n// //     //   } catch (error) {\n// //     //     console.error(\"Error deleting category:\", error);\n// //     //     return { success: false, message: \"Failed to delete category\" };\n// //     //   }\n// //     // },\n\n\n\n// //     // deleteCategory: async (id, body) => {\n// //     //   console.log(\"Request Body:\", body);\n// //     //   const { ids } = body;\n// //     //   try {\n// //     //     await new Promise(resolve => setTimeout(resolve, 1000));\n// //     //     const updatedcategory = categoryData.filter(category => category._id !== id);\n// //     //     categoryData.length = 0;\n// //     //     updatedcategory.forEach(category => categoryData.push(category));\n// //     //     console.log(\"Updated category:\", updatedcategory);\n// //     //     return { success: true, message: \"Category deleted successfully\", data: updatedcategory };\n// //     //   } catch (error) {\n// //     //     return { success: false, message: \"Failed to delete category\" };\n// //     //   }\n// //     // },\n\n\n// //     updateManyCategory: async (body) => {\n// //       return requests.patch(\"/category/update/many\", body);\n// //       // return [];\n\n// //     },\n\n// //       deleteManyCategory: async (body) => {\n// //         return requests.patch(\"/category/delete/many\", body);\n// //         // return [];\n// //       }\n// //   },\n// // };\n\n// // export default CategoryServices;\n\n\n\n\n// // justt added For Now Heree Justt Checkings\n\n\n// import requests from \"./httpService\";\n\n// const CategoryServices = {\n//   getAllCategory: async () => {\n//     return requests.get(\"/category\");\n//     // return []\n//   },\n\n//   getAllcategory: async () => {\n//     return requests.get(\"/category/all\");\n//     // return [];\n//   },\n\n//   getCategoryById: async (id) => {\n//     return requests.get(`/category/${id}`);\n//     // return [];\n//   },\n\n//   addCategory: async (body) => {\n//     console.log(\"datas :\", body)\n//     console.log(\"datas name :\", body.name.en)\n//     return requests.post(\"/category\", { body, name: body.name.en });\n//     // return [];\n//   },\n\n//   addAllCategory: async (body) => {\n//     return requests.post(\"/category/add/all\", body);\n//     // return [];\n\n//   },\n\n//   updateCategory: async (id, body) => {\n//     return requests.put(`/category/${id}`, body);\n//   },\n\n//   updateStatus: async (id, body) => {\n//     return requests.put(`/category/status/${id}`, body);\n//   },\n\n//   deleteCategory: async (id, body) => {\n//     return requests.delete(`/category/${id}`, body);\n//   },\n\n//   updateManyCategory: async (body) => {\n//     const { ids, status } = body;\n\n//     return requests.patch(\"/category/update/many\", { ids, status });\n//     // return [];\n//   },\n\n//   deleteManyCategory: async (body) => {\n//     // console.log(\"datas :\", body.ids)\n//     return requests.patch(\"/category/delete/many\", body.ids);\n//     // return [];\n\n//   },\n// };\n\n// export default CategoryServices;\n\n\n\n\n// new ones according to the backend from nodee js\n\nimport requests from \"./httpService\";\n\nconst CategoryServices = {\n  getAllCategory: async () => {\n    return requests.get(\"/api/category/all\");\n  },\n\n  getAllcategory: async () => {\n    return requests.get(\"/api/category\");\n  },\n\n  getCategoryById: async (id) => {\n    return requests.get(`/api/category/${id}`);\n  },\n\n  addCategory: async (body) => {\n    return requests.post(\"/api/category/add\", body);\n  },\n\n  addAllCategory: async (body) => {\n    return requests.post(\"/api/category/add/all\", body); // Updated route\n  },\n\n  updateCategory: async (id, body) => {\n    return requests.put(`/api/category/${id}`, body); // Updated route\n  },\n\n  updateStatus: async (id, body) => {\n    return requests.put(`/api/category/status/${id}`, body); // Updated route\n  },\n\n  // deleteCategory: async (id) => {\n  //   console.log(\"ids : \", id)\n  //   return requests.delete(`/api/category/${id}`); // Updated route\n  // },\n  deleteCategory: async (id) => {\n    console.log(\"Request to delete category with ID:\", id);\n\n    try {\n      const response = await requests.delete(`/api/category/${id}`);\n      console.log(\"Response from backend:\", response);\n\n      return response;\n    } catch (error) {\n      console.error(\"Error from backend:\", error);\n    }\n  },\n\n  updateManyCategory: async (body) => {\n    const { ids, status } = body;\n    return requests.patch(\"/api/category/update/many\", { ids, status });\n  },\n\n  deleteManyCategory: async (body) => {\n    return requests.patch(\"/api/category/delete/many\", body);\n  },\n};\n\nexport default CategoryServices;\n","// import requests from './httpService';\n\n// const LanguageServices = {\n//   getAllLanguages: async () => {\n//     return requests.get('/api/language/show');\n//     // return requests.get('/language/all');\n//     // return []\n//   },\n\n//   // Commented for just noww\n//   // getShowingLanguage: async () => {\n//   //   return requests.get('/languages/show');\n//   //   // return []\n//   // },\n\n//   getLanguageById: async (id) => {\n//     return requests.get(`/languages/${id}`);\n//     // return requests.get(`/language/${id}`);\n//     // return []\n//   },\n\n//   addLanguage: async (body) => {\n//     return requests.post('/languages', body);\n\n\n//     // return requests.post('/language/add', body);\n\n//     // For Frontend\n//     // const currencies = [];\n//     // try {\n//     //   console.log(\"Adding currency:\", body);\n//     //   await new Promise(resolve => setTimeout(resolve, 1000));\n//     //   currencies.push(body);\n//     //   return { success: true, message: \"currency added successfully\" };\n//     // } catch (error) {\n//     //   return { success: false, message: \"Failed to add currency\" };\n//     // }\n//   },\n\n//   addAllLanguage: async (body) => {\n//     return requests.post('/language/add/all', body);\n//   },\n\n//   updateLanguage: async (id, body) => {\n//     console.log(\"updated Languages\", body)\n//     return requests.put(`/languages/${id}`, body);\n//     // return requests.put(`/language/${id}`, body);\n//   },\n\n//   updateManyLanguage: async (body) => {\n//     const { ids, status } = body;\n//     console.log(\"data\", body);\n\n//     console.log(\"ids\", ids);\n//     console.log(\"status\", status); // Logging the status to verify\n\n//     return requests.patch('languages/update/many', { ids, status }); // Sending both ids and status\n//   },\n\n\n//   updateStatus: async (id, body) => {\n//     // console.log(\"updatestatus data\", body)\n//     // console.log(\"updatestatus id\", id)\n//     return requests.put(`/languages/status/${id}`, body);\n//   },\n\n//   deleteLanguage: async (id, body) => {\n//     return requests.delete(`/languages/${id}`, body);\n//     // return requests.patch(`/language/${id}`, body);\n//   },\n\n//   deleteManyLanguage: async (ids) => {\n//     // console.log(\"Deleting languages with IDs:\", ids);\n//     // // console.log(\"Deleting languages with IDs Heres:\", { data: ids });\n//     return requests.delete('/languages/delete/many', { data: ids.ids }); // Sending just the array of IDs\n//     // return requests.patch('/language/delete/many', body);\n//   },\n// };\n\n// export default LanguageServices;\n\n\n\n//  New Routes \n\nimport requests from './httpService';\n\nconst LanguageServices = {\n  getAllLanguages: async () => {\n    return requests.get('/api/language/all');\n  },\n\n  getShowingLanguage: async () => {\n    return requests.get('/api/language/show');\n  },\n\n  getLanguageById: async (id) => {\n    return requests.get(`/api/language/${id}`);\n  },\n\n  addLanguage: async (body) => {\n    return requests.post('/api/language/add', body);\n  },\n\n  addAllLanguage: async (body) => {\n    return requests.post('/api/language/add/all', body);\n  },\n\n  updateLanguage: async (id, body) => {\n    return requests.put(`/api/language/${id}`, body);\n  },\n\n  updateManyLanguage: async (body) => {\n    const { ids, status } = body;\n    return requests.patch('/api/language/update/many', { ids, status });\n  },\n\n  updateStatus: async (id, body) => {\n    return requests.put(`/api/language/status/${id}`, body);\n  },\n\n  deleteLanguage: async (id) => {\n    return requests.patch(`/api/language/${id}`);\n  },\n\n  deleteManyLanguage: async (ids) => {\n    return requests.patch('/api/language/delete/many', ids);\n  },\n};\n\nexport default LanguageServices;\n","// // import { useState } from 'react';\n// import requests from './httpService';\n// // import languages from 'utils/languages';\n\n\n// const AttributeServices = {\n\n//   getAllAttributes: async ({ type, option, option1 }) => {\n//     return requests.get(\n//       `/attributes?type=${type}&option=${option}&option1=${option1}`\n//     );\n//   },\n\n//   getShowingAttributes: async (body) => {\n//     return requests.get('/attributes', body);\n//     // return requests.get('/attributes/show', body);\n//     // return { type: '1', option: '1', option1: '1' };\n//     // return {};\n\n//   },\n\n//   addAttribute: async (body) => {\n//     return requests.post('/attributes', body);\n//     // return requests.post('/attributes/add', body);\n//     // return {};\n\n//   },\n\n//   // addChildAttribute: async (id, body) => {\n//   //   return requests.put(`/attributes/add/child/${id}`, body);\n//   //   // return {};\n//   // },\n\n//   addAllAttributes: async (body) => {\n//     return requests.post('/attributes/add/all', body);\n//     // return {};\n//     // try {\n//     //   console.log(\"Adding language:\", body);\n//     //   await new Promise(resolve => setTimeout(resolve, 1000));\n//     //   languages.push(body);\n//     //   return { success: true, message: \"Language added successfully\" };\n//     // } catch (error) {\n//     //   return { success: false, message: \"Failed to add language\" };\n//     // }\n//   },\n\n//   getAttributeById: async (id) => {\n//     return requests.get(`/attributes/${id}`);\n//     // return {};\n//   },\n\n//   // getChildAttributeById: async ({ id, ids }) => {\n//   //   return requests.get(`/attributes/child/${id}/${ids}`);\n//   // },\n\n//   updateAttributes: async (id, body) => {\n//     return requests.put(`/attributes/${id}`, body);\n//   },\n\n//   updateChildAttributes: async ({ id, ids }, body) => {\n//     return requests.put(`/attributes/update/child/${ids}/${id}`, body);\n//   },\n\n//   updateStatus: async (id, body) => {\n//     return requests.put(`/attributes/status/${id}`, body);\n//   },\n\n//   updateChildStatus: async (id, body) => {\n//     return requests.put(`/attributes/status/child/${id}`, body);\n//   },\n\n//   deleteAttribute: async (id, body) => {\n//     return requests.delete(`/attributes/${id}`, body);\n//   },\n\n//   deleteChildAttribute: async ({ id, ids }, body) => {\n//     return requests.put(`/attributes/delete/child/${ids}/${id}`, body);\n//   },\n\n//   updateManyAttribute: async (body) => {\n//     return requests.patch('/attributes/update/many', body);\n//   },\n\n//   updateManyChildAttribute: async (body) => {\n//     return requests.patch('/attributes/update/child/many', body);\n//   },\n\n//   deleteManyAttribute: async (body) => {\n//     console.log(\"datas : \", body)\n//     return requests.patch('/attributes/delete/many', body);\n//   },\n\n//   deleteManyChildAttribute: async (body) => {\n//     return requests.patch('/attributes/delete/child/many', body);\n//   },\n// };\n\n// export default AttributeServices;\n\n\n// for backend now avaible change it when needed\n\n\n// import requests from './httpService';\n\n// const AttributeServices = {\n//   getAllAttributes: async ({ type, option, option1 }) => {\n//     return requests.get(\n//       // `/api/attributes?type=${type}&option=${option}&option1=${option1}\n//       `/api/attributes`\n//     );\n//   },\n\n//   getShowingAttributes: async () => {\n//     return requests.get('/api/attributes/show');\n//   },\n\n//   addAttribute: async (body) => {\n//     return requests.post('/api/attributes/add', body);\n//   },\n\n//   addAllAttributes: async (body) => {\n//     return requests.post('/api/attributes/add/all', body);\n//   },\n\n//   getAttributeById: async (id) => {\n//     return requests.get(`/api/attributes/${id}`);\n//   },\n\n//   updateAttributes: async (id, body) => {\n//     return requests.put(`/api/attributes/${id}`, body);\n//   },\n\n//   updateChildAttributes: async ({ id, ids }, body) => {\n//     return requests.put(`/api/attributes/update/child/${ids}/${id}`, body);\n//   },\n\n//   updateStatus: async (id, body) => {\n//     return requests.put(`/api/attributes/status/${id}`, body);\n//   },\n\n//   deleteAttribute: async (id) => {\n//     console.log(\":id \", id)\n//     return requests.delete(`/api/attributes/${id}`);\n//   },\n\n//   deleteChildAttribute: async ({ id, ids }, body) => {\n//     return requests.put(`/api/attributes/delete/child/${ids}/${id}`, body);\n//   },\n\n//   updateManyAttribute: async (body) => {\n//     return requests.patch('/api/attributes/update/many', body);\n//   },\n\n//   deleteManyAttribute: async (body) => {\n//     console.log(\"idsssssssss : \", body)\n//     return requests.delete('/api/attributes/delete/many', body);\n//   },\n\n//   updateManyChildAttribute: async (body) => {\n//     return requests.patch('/api/attributes/delete/child/many', body);\n//   },\n\n//   deleteManyChildAttribute: async (body) => {\n//     return requests.patch('/api/attributes/delete/child/many', body);\n//   }\n// };\n\n// export default AttributeServices;\n\n\n\n// // import { useState } from 'react';\n// import requests from './httpService';\n// // import languages from 'utils/languages';\n\n\n// const AttributeServices = {\n\n//   getAllAttributes: async ({ type, option, option1 }) => {\n//     return requests.get(\n//       `/attributes?type=${type}&option=${option}&option1=${option1}`\n//     );\n//   },\n\n//   getShowingAttributes: async (body) => {\n//     return requests.get('/attributes', body);\n//     // return requests.get('/attributes/show', body);\n//     // return { type: '1', option: '1', option1: '1' };\n//     // return {};\n\n//   },\n\n//   addAttribute: async (body) => {\n//     return requests.post('/attributes', body);\n//     // return requests.post('/attributes/add', body);\n//     // return {};\n\n//   },\n\n//   // addChildAttribute: async (id, body) => {\n//   //   return requests.put(`/attributes/add/child/${id}`, body);\n//   //   // return {};\n//   // },\n\n//   addAllAttributes: async (body) => {\n//     return requests.post('/attributes/add/all', body);\n//     // return {};\n//     // try {\n//     //   console.log(\"Adding language:\", body);\n//     //   await new Promise(resolve => setTimeout(resolve, 1000));\n//     //   languages.push(body);\n//     //   return { success: true, message: \"Language added successfully\" };\n//     // } catch (error) {\n//     //   return { success: false, message: \"Failed to add language\" };\n//     // }\n//   },\n\n//   getAttributeById: async (id) => {\n//     return requests.get(`/attributes/${id}`);\n//     // return {};\n//   },\n\n//   // getChildAttributeById: async ({ id, ids }) => {\n//   //   return requests.get(`/attributes/child/${id}/${ids}`);\n//   // },\n\n//   updateAttributes: async (id, body) => {\n//     return requests.put(`/attributes/${id}`, body);\n//   },\n\n//   updateChildAttributes: async ({ id, ids }, body) => {\n//     return requests.put(`/attributes/update/child/${ids}/${id}`, body);\n//   },\n\n//   updateStatus: async (id, body) => {\n//     return requests.put(`/attributes/status/${id}`, body);\n//   },\n\n//   updateChildStatus: async (id, body) => {\n//     return requests.put(`/attributes/status/child/${id}`, body);\n//   },\n\n//   deleteAttribute: async (id, body) => {\n//     return requests.delete(`/attributes/${id}`, body);\n//   },\n\n//   deleteChildAttribute: async ({ id, ids }, body) => {\n//     return requests.put(`/attributes/delete/child/${ids}/${id}`, body);\n//   },\n\n//   updateManyAttribute: async (body) => {\n//     return requests.patch('/attributes/update/many', body);\n//   },\n\n//   updateManyChildAttribute: async (body) => {\n//     return requests.patch('/attributes/update/child/many', body);\n//   },\n\n//   deleteManyAttribute: async (body) => {\n//     console.log(\"datas : \", body)\n//     return requests.patch('/attributes/delete/many', body);\n//   },\n\n//   deleteManyChildAttribute: async (body) => {\n//     return requests.patch('/attributes/delete/child/many', body);\n//   },\n// };\n\n// export default AttributeServices;\n\n\n// for backend now avaible change it when needed\n\n\nimport requests from './httpService';\n\nconst AttributeServices = {\n  getAllAttributes: async ({ type, option, option1 }) => {\n    return requests.get(\n      // `/api/attributes?type=${type}&option=${option}&option1=${option1}\n      `/api/attributes`\n    );\n  },\n\n  getShowingAttributes: async () => {\n    return requests.get('/api/attributes/show');\n  },\n\n  addAttribute: async (body) => {\n    return requests.post('/api/attributes/add', body);\n  },\n\n  addAllAttributes: async (body) => {\n    return requests.post('/api/attributes/add/all', body);\n  },\n\n  addChildAttributes: async (id, body) => {\n    console.log(\"ids : \", id)\n    console.log(\"Datas : \", body)\n    return requests.put(`/api/attributes/add/child/${id}`, body);\n  },\n\n  getAttributeById: async (id) => {\n    return requests.get(`/api/attributes/${id}`);\n  },\n\n  updateAttributes: async (id, body) => {\n    return requests.put(`/api/attributes/${id}`, body);\n  },\n\n  updateChildAttributes: async ({ id, ids }, body) => {\n    return requests.put(`/api/attributes/update/child/${ids}/${id}`, body);\n  },\n\n  updateStatus: async (id, body) => {\n    return requests.put(`/api/attributes/status/${id}`, body);\n  },\n  updateChildStatus: async (id, body) => {\n    return requests.put(`/api/attributes/status/child/${id}`, body);\n  },\n\n  deleteAttribute: async (id) => {\n    console.log(\":id \", id)\n    return requests.delete(`/api/attributes/${id}`);\n  },\n\n  deleteChildAttribute: async ({ id, ids }, body) => {\n    return requests.delete(`/api/attributes/delete/child/${ids}/${id}`, body);\n  },\n\n  updateManyAttribute: async (body) => {\n    return requests.patch('/api/attributes/update/many', body);\n  },\n\n  deleteManyAttribute: async (body) => {\n    const { ids } = body;\n    return requests.delete('/api/attributes/delete/many', { data: { ids } });\n  },\n\n\n  updateManyChildAttribute: async (body) => {\n    return requests.patch('/api/attributes/delete/child/many', body);\n  },\n\n  deleteManyChildAttribute: async (body) => {\n    return requests.patch('/api/attributes/delete/child/many', body);\n  }\n};\n\nexport default AttributeServices;\n","// import productData from \"utils/products\";\n// import requests from \"./httpService\";\n\n// const ProductServices = {\n//   getAllProducts: async (\n//     // {page, limit, category, title, price }\n//   ) => {\n//     // const searchCategory = category !== null ? category : \"\";\n//     // const searchTitle = title !== null ? title : \"\";\n//     // const searchPrice = price !== null ? price : \"\";\n\n//     // return requests.get(\n//     //   `/products?page=${page}&limit=${limit}&category=${searchCategory}&title=${searchTitle}&price=${searchPrice}`\n//     // );\n//     return (\n//       { products: [{ _id: 1, title: { en: \"Samsung\" }, prices: { price: 120, discount: 10, originalPrice: 108 }, stock: 10, description: 'description', tag: 'none', category: { name: 'Phones' }, image: ['none'], status: 'none' }] }\n//     );\n//   },\n\n//   getProductById: async (id) => {\n//     // return requests.post(`/products/${id}`);  return (\n//     // return ({ _id: 1, title: { en: \"Samsung\" }, prices: { price: 120, discount: 10, originalPrice: 108 }, stock: 10, description: 'description', tag: 'none', category: { name: 'Phones' }, image: ['none'], status: 'none' }\n//     // );\n//     try {\n//       // Find the product with the specified ID in the productData array\n//       const product = productData.find(product => product._id === id);\n//       if (product) {\n//         return { success: true, data: product };\n//       } else {\n//         return { success: false, message: \"Product not found\" };\n//       }\n//     } catch (error) {\n//       return { success: false, message: \"Failed to fetch product\" };\n//     }\n//   },\n//   // addProduct: async (body) => {\n//   //   return requests.post(\"/products/add\", body);\n//   // },\n//   addProduct: async (body) => {\n//     try {\n//       console.log(\"Adding product:\", body);\n//       await new Promise(resolve => setTimeout(resolve, 1000));\n//       productData.push(body);\n//       return { success: true, message: \"Product added successfully\" };\n//     } catch (error) {\n//       return { success: false, message: \"Failed to add product\" };\n//     }\n//   },\n\n//   // deleteProduct: async (id) => {\n//   //   try {\n//   //     console.log(\"Deleting product with ID:\", id);\n//   //     await new Promise(resolve => setTimeout(resolve, 1000));\n//   //     const updatedProducts = productData.filter(product => product._id !== id);\n//   //     productData.length = 0;\n//   //     updatedProducts.forEach(product => productData.push(product));\n//   //     return { success: true, message: \"Product deleted successfully\" };\n//   //   } catch (error) {\n//   //     return { success: false, message: \"Failed to delete product\" };\n//   //   }\n//   // },\n//   addAllProducts: async (body) => {\n//     return requests.post(\"/products/all\", body);\n//   },\n//   updateProduct: async (id, body) => {\n//     return requests.patch(`/products/${id}`, body);\n//   },\n//   updateManyProducts: async (body) => {\n//     return requests.patch(\"products/update/many\", body);\n//   },\n//   updateStatus: async (id, body) => {\n//     return requests.put(`/products/status/${id}`, body);\n//   },\n\n//   // for now commeneted uncomment for backend integration\n\n//   // deleteProduct: async (id) => {\n//   //   return requests.delete(`/products/${id}`);\n//   // },\n\n//   deleteProduct: async (id) => {\n//     try {\n//       console.log(\"Deleting product with ID:\", id);\n//       await new Promise(resolve => setTimeout(resolve, 1000));\n//       const updatedProducts = productData.filter(product => product._id !== id);\n//       productData.length = 0;\n//       updatedProducts.forEach(product => productData.push(product));\n//       return { success: true, message: \"Product deleted successfully\" };\n//     } catch (error) {\n//       return { success: false, message: \"Failed to delete product\" };\n//     }\n//   },\n\n//   // for now commeneted uncomment for backend integration\n\n//   // deleteManyProducts: async (body) => {\n//   //   return requests.patch(\"/products/delete/many\", body);\n//   // },\n//   deleteManyProducts: async (body) => {\n//     console.log(\"Request Body:\", body);\n//     const { ids } = body;\n//     try {\n//       await new Promise(resolve => setTimeout(resolve, 1000));\n//       const updatedProducts = productData.filter(product => !ids.includes(product._id));\n//       productData.length = 0;\n//       updatedProducts.forEach(product => productData.push(product));\n//       return { success: true, message: \"Products deleted successfully\", data: updatedProducts };\n//     } catch (error) {\n//       return { success: false, message: \"Failed to delete products\" };\n//     }\n//   }\n// };\n\n// export default ProductServices;\n\n\n\n\n// new backendss addedds\n\nimport requests from './httpService';\nimport io from \"socket.io-client\";\n\n// Create a socket connection to the server\nconst socket = io(\"http://localhost:5055\");\nconst ProductServices = {\n  getAllProducts: async () => {\n    return requests.get(\"/api/products\");\n  },\n\n  //  just added for slugss\n  //  updated the routes as well heree for now\n  getProductById: async (id) => {\n    return requests.get(`/api/products/product/${id}`);\n  },\n\n  //  just added for slugss\n\n  getProductBySlug: async (slug) => {\n    return requests.get(`/api/products/product/${slug}`);\n  },\n\n  addProduct: async (body) => {\n    return requests.post(\"/api/products/add\", body);\n  },\n\n  addAllProducts: async (body) => {\n    return requests.post(\"/api/products/all\", body);\n  },\n\n  updateProduct: async (id, body) => {\n    console.log(\"ids and bodyy : \", id, body)\n    return requests.patch(`/api/products/${id}`, body);\n  },\n\n  updateManyProducts: async (body) => {\n    return requests.patch(\"/api/products/update/many\", body);\n  },\n\n  // updateStatus: async (id, body) => {\n  //   return requests.put(`/api/products/status/${id}`, body);\n  // },\n\n  updateStatus: async (id, body) => {\n    // Make the HTTP request to update the status\n    const response = await requests.put(`/api/products/status/${id}`, body);\n\n    // If the HTTP request is successful, emit a status update event to the server\n    if (response.status === 200) {\n      socket.emit(\"updateStatus\", id, body.status);\n    }\n\n    return response;\n  },\n\n  // Method for subscribing to product status updates\n  subscribeToStatusUpdates: (callback) => {\n    // Listen for status updates from the server\n    socket.on(\"statusUpdate\", callback);\n  },\n\n  // Method for unsubscribing from status updates\n  unsubscribeFromStatusUpdates: () => {\n    // Remove the event listener for status updates\n    socket.off(\"statusUpdate\");\n  },\n\n  deleteProduct: async (id) => {\n    return requests.delete(`/api/products/${id}`);\n  },\n\n  deleteManyProducts: async (body) => {\n    return requests.patch(\"/api/products/delete/many\", body);\n  }\n};\n\nexport default ProductServices;\n","// import currencies from 'utils/currency';\n// import requests from './httpService';\n\n// const CurrencyServices = {\n//   getAllCurrency: async () => {\n//     return requests.get('/currency');\n//   },\n\n//   getShowingCurrency: async () => {\n//     return requests.get('/currency/show');\n//   },\n\n//   getCurrencyById: async (id) => {\n//     return requests.get(`/currency/${id}`);\n//   },\n\n//   addCurrency: async (body) => {\n//     // return requests.post('/currency/add', body);\n//     // addProduct: async (body) => {\n//     try {\n//       console.log(\"Adding currency:\", body);\n//       await new Promise(resolve => setTimeout(resolve, 1000));\n//       currencies.push(body);\n//       return { success: true, message: \"currency added successfully\" };\n//     } catch (error) {\n//       return { success: false, message: \"Failed to add currency\" };\n//     }\n//     // },\n//   },\n\n//   addAllCurrency: async (body) => {\n//     return requests.post('/currency/add/all', body);\n//   },\n\n//   updateCurrency: async (id, body) => {\n//     return requests.put(`/currency/${id}`, body);\n//   },\n\n//   updateManyCurrencies: async (body) => {\n//     return requests.patch('currency/update/many', body);\n//   },\n\n//   updateEnabledStatus: async (id, body) => {\n//     return requests.put(`/currency/status/enabled/${id}`, body);\n//   },\n\n//   updateLiveExchangeRateStatus: async (id, body) => {\n//     return requests.put(`/currency/status/live-exchange-rates/${id}`, body);\n//   },\n\n\n//   deleteCurrency: async (index) => {\n//     // return requests.delete(`/category/${id}`, body);\n//     try {\n//       console.log(\"Deleting currency at index:\", index);\n//       await new Promise(resolve => setTimeout(resolve, 1000))\n//       currencies.splice(index, 1);\n//       return { success: true, message: \"Currency deleted successfully\" };\n//     } catch (error) {\n//       return { success: false, message: \"Failed to delete currency\" };\n//     }\n//     // console.log(\"5\", body)\n//     // const { ids } = body;\n//     // try {\n//     //   await new Promise(resolve => setTimeout(resolve, 1000));\n//     //   const updatedProducts = currencies.filter(product => !ids.includes(product._id));\n//     //   currencies.length = 0;\n//     //   updatedProducts.forEach(product => currencies.push(product));\n//     //   return { success: true, message: \"Products deleted successfully\", data: updatedProducts };\n//     // } catch (error) {\n//     //   return { success: false, message: \"Failed to delete products\" };\n//     // }\n//   },\n\n\n//   // deleteCurrency: async (index) => {\n\n//   //   console.log(\"5\", body)\n//   //   const { ids } = body;\n//   //   try {\n//   //     await new Promise(resolve => setTimeout(resolve, 1000));\n//   //     const updatedProducts = currencies.filter(product => !ids.includes(product._id));\n//   //     currencies.length = 0;\n//   //     updatedProducts.forEach(product => currencies.push(product));\n//   //     return { success: true, message: \"Products deleted successfully\", data: updatedProducts };\n//   //   } catch (error) {\n//   //     return { success: false, message: \"Failed to delete products\" };\n//   //   }\n//   // },\n\n//   deleteManyCurrency: async (body) => {\n//     // return requests.patch('/currency/delete/many', body);\n//     console.log(\"5\", body);\n//     const { ids, category } = body;\n//     try {\n//       await new Promise(resolve => setTimeout(resolve, 1000));\n//       const updatedCategories = currencies.filter(cat => !ids.includes(cat._id));\n//       currencies.length = 0;\n//       updatedCategories.forEach(cat => currencies.push(cat));\n//       return { success: true, message: \"Categories deleted successfully\", data: updatedCategories };\n//     } catch (error) {\n//       return { success: false, message: \"Failed to delete categories\" };\n//     }\n\n//   },\n// };\n\n// export default CurrencyServices;\n\n\n// for the backend for now addedd heree for you sir yow\n\nimport requests from \"./httpService\";\n\nconst CurrencyServices = {\n  getAllCurrency: async () => {\n    return requests.get('/api/currency');\n  },\n\n  updatePriorities: async (currencies) => {\n    return requests.patch('/api/currency/update/priorities', currencies);\n  },\n\n  getShowingCurrency: async (data) => {\n    // console.log(\"datas :\", data)\n    return requests.get('/api/currency/show');\n  },\n\n  getCurrencyById: async (id) => {\n    return requests.get(`/api/currency/${id}`);\n  },\n\n  addCurrency: async (body) => {\n    return requests.post('/api/currency/add', body);\n  },\n\n  addAllCurrency: async (body) => {\n    return requests.post('/api/currency/add/all', body);\n  },\n\n  updateCurrency: async (id, body) => {\n    return requests.put(`/api/currency/${id}`, body);\n  },\n\n  updateManyCurrencies: async (body) => {\n    console.log(\"udpates currencies\", body);\n    return requests.patch('/api/currency/update/many', body);\n  },\n\n  updateEnabledStatus: async (id, body) => {\n    return requests.put(`/api/currency/status/enabled/${id}`, body);\n  },\n\n  updateLiveExchangeRateStatus: async (id, body) => {\n    return requests.put(`/api/currency/status/live-exchange-rates/${id}`, body);\n  },\n\n  deleteCurrency: async (id) => {\n    return requests.delete(`/api/currency/${id}`);\n  },\n\n  deleteManyCurrency: async (body) => {\n    return requests.patch('/api/currency/delete/many', body);\n  },\n};\n\nexport default CurrencyServices;\n","// // import coupons from 'utils/coupons';\n// import requests from './httpService';\n\n// const CouponServices = {\n//   addCoupon: async (body) => {\n//     return requests.post('/coupons/add', body);\n//     // return [];\n//     // try {\n//     //   console.log(\"Adding coupons:\", body);\n//     //   await new Promise(resolve => setTimeout(resolve, 1000));\n//     //   coupons.push(body);\n//     //   return { success: true, message: \"coupons added successfully\" };\n//     // } catch (error) {\n//     //   return { success: false, message: \"Failed to add coupons\" };\n//     // }\n//   },\n//   addAllCoupon: async (body) => {\n//     return requests.post('/api/coupons/add/all', body);\n//     // return [];\n\n//   },\n//   getAllCoupons: async () => {\n//     return requests.get('/api/coupon');\n//     // return [];\n\n//   },\n//   getCouponById: async (id) => {\n//     return requests.get(`/coupons/${id}`);\n//     // return [];\n//   },\n//   updateCoupon: async (id, body) => {\n//     return requests.put(`/coupons/${id}`, body);\n//     // return [];\n//   },\n//   // updateManyCoupons: async (body) => {\n//   //   console.log(\"id\", body)\n//   //   console.log(\"data\", body.ids)\n//   //   return requests.patch('/coupons/update/many', { ids, status });\n//   // },\n//   updateManyCoupons: async (body) => {\n//     console.log(\"id\", body);\n//     console.log(\"data\", body.ids);\n\n//     const { ids, status } = body; // Destructuring ids and status from body\n\n//     return requests.patch('/coupons/update/many', { ids, status });\n//   },\n\n//   updateStatus: async (id, body) => {\n//     console.log(\"id\", id)\n//     console.log(\"data\", body)\n//     return requests.put(`/coupons/status/${id}`, body);\n//   },\n\n//   deleteCoupon: async (id) => {\n//     return requests.delete(`/coupons/${id}`);\n//   },\n\n//   // deleteCoupon: async (id) => {\n//   //   try {\n//   //     await new Promise(resolve => setTimeout(resolve, 1000));\n//   //     const updatedCoupons = coupons.filter(coupon => coupon._id !== id);\n//   //     coupons.length = 0;\n//   //     updatedCoupons.forEach(coupon => coupons.push(coupon));\n//   //     return { success: true, message: \"Coupon deleted successfully\" };\n//   //   } catch (error) {\n//   //     return { success: false, message: \"Error deleting coupon\" };\n//   //   }\n//   // },\n\n//   deleteManyCoupons: async (body) => {\n//     console.log(\"ids\", body.ids);\n//     return requests.patch(`/coupons/delete/many`, body.ids);\n//   },\n\n//   // deleteManyCoupons: async (body) => {\n//   //   const { ids } = body;\n\n//   //   try {\n\n//   //     await new Promise(resolve => setTimeout(resolve, 1000));\n//   //     // const updatedProducts = productData.filter(product => !ids.includes(product._id));\n//   //     console.log(\"coupons Before Deletion : \", body)\n//   //     const updatedCoupons = coupons.filter(coupons => !ids.includes(coupons._id));\n//   //     updatedCoupons.length = 0;\n//   //     updatedCoupons.forEach(coupon => coupons.push(coupon));\n//   //     console.log(\"coupons After Deletion : \", updatedCoupons)\n//   //     return { success: true, message: \"Coupons Deleted Successfully\" }\n//   //   } catch (error) {\n//   //     return { success: false, message: \"hi\" }\n//   //   }\n\n//   // }\n\n// };\n\n// export default CouponServices;\n\n\n\n// addedd new for the backend for now sir\n\n\nimport requests from './httpService';\n\nconst CouponServices = {\n  addCoupon: async (body) => {\n    return requests.post('/api/coupon/add', body);\n  },\n\n  addAllCoupon: async (body) => {\n    return requests.post('/api/coupon/add/all', body);\n  },\n\n  getAllCoupons: async () => {\n    return requests.get('/api/coupon');\n  },\n\n  getCouponById: async (id) => {\n    return requests.get(`/api/coupon/${id}`);\n  },\n\n  updateCoupon: async (id, body) => {\n    return requests.put(`/api/coupon/${id}`, body);\n  },\n\n  updateManyCoupons: async (body) => {\n    const { ids, status } = body;\n    return requests.patch('/api/coupon/update/many', { ids, status });\n  },\n\n  updateStatus: async (id, body) => {\n    return requests.put(`/api/coupon/status/${id}`, body);\n  },\n\n  deleteCoupon: async (id) => {\n    return requests.delete(`/api/coupon/${id}`);\n  },\n\n  deleteManyCoupons: async (body) => {\n    return requests.patch('/api/coupon/delete/many', body);\n  }\n};\n\nexport default CouponServices;\n","import React from 'react'\n\nconst PageTitle = ({ children }) => {\n  return (\n    <h1 className=\"my-6 text-lg font-bold text-gray-700 dark:text-gray-300\">{children}</h1>\n  )\n}\n\nexport default PageTitle\n","import Ajv from \"ajv\";\nimport csvToJson from \"csvtojson\";\nimport * as dayjs from \"dayjs\";\nimport isBetween from \"dayjs/plugin/isBetween\";\nimport isToday from \"dayjs/plugin/isToday\";\nimport { useContext, useEffect, useMemo, useRef, useState } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport * as XLSX from \"xlsx\";\nimport { SidebarContext } from \"context/SidebarContext\";\nimport AttributeServices from \"services/AttributeServices\";\nimport CategoryServices from \"services/CategoryServices\";\nimport CouponServices from \"services/CouponServices\";\nimport CurrencyServices from \"services/CurrencyServices\";\nimport CustomerServices from \"services/CustomerServices\";\nimport LanguageServices from \"services/LanguageServices\";\nimport ProductServices from \"services/ProductServices\";\nimport SettingServices from \"services/SettingServices\";\nimport { notifyError, notifySuccess } from \"utils/toast\";\nimport useAsync from \"./useAsync\";\n\nconst categorySchema = {\n  type: \"object\",\n  properties: {\n    _id: { type: \"string\" },\n    name: { type: \"object\" },\n    description: { type: \"object\" },\n    icon: { type: \"string\" },\n    status: { type: \"string\" },\n  },\n  required: [\"name\"],\n};\nconst attributeSchema = {\n  type: \"object\",\n  properties: {\n    status: { type: \"string\" },\n    title: { type: \"object\" },\n    name: { type: \"object\" },\n    variants: { type: \"array\" },\n    option: { type: \"string\" },\n    type: { type: \"string\" },\n  },\n  required: [\"name\", \"title\"],\n};\nconst couponSchema = {\n  type: \"object\",\n  properties: {\n    title: { type: \"object\" },\n    couponCode: { type: \"string\" },\n    endTime: { type: \"string\" },\n    discountPercentage: { type: \"number\" },\n    minimumAmount: { type: \"number\" },\n    productType: { type: \"string\" },\n    logo: { type: \"string\" },\n    discountType: { type: \"object\" },\n    status: { type: \"string\" },\n  },\n  required: [\"title\", \"couponCode\", \"endTime\", \"status\"],\n};\nconst customerSchema = {\n  type: \"object\",\n  properties: {\n    name: { type: \"string\" },\n    email: { type: \"string\" },\n  },\n  required: [\"name\", \"email\"],\n};\n\nconst useFilter = (data) => {\n  const ajv = new Ajv({ allErrors: true });\n\n  const [filter, setFilter] = useState(\"\");\n  const [sortedField, setSortedField] = useState(\"\");\n  const [searchText, setSearchText] = useState(\"\");\n  const [searchUser, setSearchUser] = useState(\"\");\n  const [searchCoupon, setSearchCoupon] = useState(\"\");\n  const [searchOrder, setSearchOrder] = useState(\"\");\n  const [categoryType, setCategoryType] = useState(\"\");\n  const [attributeTitle, setAttributeTitle] = useState(\"\");\n  const [country, setCountry] = useState(\"\");\n  const [zone, setZone] = useState(\"\");\n  const [startDate, setStartDate] = useState(\"\");\n  const [endDate, setEndDate] = useState(\"\");\n  const [language, setLanguage] = useState(\"\");\n  const [currency, setCurrency] = useState(\"\");\n  const [pending, setPending] = useState([]);\n  const [processing, setProcessing] = useState([]);\n  const [delivered, setDelivered] = useState([]);\n  const [status, setStatus] = useState(\"\");\n  const [role, setRole] = useState(\"\");\n  const [time, setTime] = useState(\"\");\n  const [currentPage, setCurrentPage] = useState(1);\n  const [resultsPerPage, setResultsPerPage] = useState(10);\n  const [dataTable, setDataTable] = useState([]); //DataTable for showing on table according to filtering\n  const [todayOrder, setTodayOrder] = useState(\"\");\n  const [monthlyOrder, setMonthlyOrder] = useState(\"\");\n  const [totalOrder, setTotalOrder] = useState(\"\");\n  const [selectedFile, setSelectedFile] = useState([]);\n  const [filename, setFileName] = useState(\"\");\n  const [isDisabled, setIsDisable] = useState(false);\n  const [shipping, setShipping] = useState(\"\");\n  const [newProducts] = useState([]);\n  const currencyRef = useRef(\"\");\n  const searchRef = useRef(\"\");\n  const userRef = useRef(\"\");\n  const couponRef = useRef(\"\");\n  const orderRef = useRef(\"\");\n  const categoryRef = useRef(\"\");\n  const attributeRef = useRef(\"\");\n  const countryRef = useRef(\"\");\n  const languageRef = useRef(\"\");\n  const taxRef = useRef(\"\");\n  const shippingRef = useRef(\"\");\n\n\n  dayjs.extend(isBetween);\n  dayjs.extend(isToday);\n  const location = useLocation();\n  const { lang, setIsUpdate, setLoading } = useContext(SidebarContext);\n  const { data: globalSetting } = useAsync(SettingServices.getGlobalSetting);\n  // console.log(\" datas from filters : \", data)\n  //service data filtering\n  const serviceData = useMemo(() => {\n    const date = new Date();\n    date.setDate(date.getDate() - time);\n    let services = data?.map((el) => {\n      const newDate = new Date(el?.updatedAt).toLocaleString(\"en-US\", {\n        timeZone: globalSetting?.default_time_zone,\n      });\n      const newObj = {\n        ...el,\n        updatedDate: newDate === \"Invalid Date\" ? \"\" : newDate,\n      };\n      return newObj;\n    });\n    if (location.pathname === \"/dashboard\") {\n      const orderPending = services?.filter(\n        (statusP) => statusP.status === \"Pending\"\n      );\n      setPending(orderPending);\n      const orderProcessing = services?.filter(\n        (statusO) => statusO.status === \"Processing\"\n      );\n      setProcessing(orderProcessing);\n      const orderDelivered = services?.filter(\n        (statusD) => statusD.status === \"Delivered\"\n      );\n      setDelivered(orderDelivered);\n      //daily total order calculation\n      const todayServices = services?.filter((order) =>\n        dayjs(order.createdAt).isToday()\n      );\n      const todayOrder = todayServices?.reduce(\n        (preValue, currentValue) => preValue + currentValue.total,\n        0\n      );\n      setTodayOrder(todayOrder);\n      //monthly order calculation\n      const monthlyServices = services?.filter((order) =>\n        dayjs(order.createdAt).isBetween(\n          new Date().setDate(new Date().getDate() - 30),\n          new Date()\n        )\n      );\n      const monthlyOrder = monthlyServices?.reduce(\n        (preValue, currentValue) => preValue + currentValue.total,\n        0\n      );\n      setMonthlyOrder(monthlyOrder);\n      //total order calculation\n      const totalOrder = services?.reduce(\n        (preValue, currentValue) => preValue + currentValue.total,\n        0\n      );\n      setTotalOrder(totalOrder);\n    }\n    //products filtering\n    // if (filter) {\n    // if (role && role !== \"All\") {\n    if (filter && filter !== \"Category\") {\n      services = services.filter((item) => item.parent === filter);\n      console.log(\"hi\", filter)\n    }\n    if (sortedField === \"low\") {\n      services = services.sort((a, b) => a.originalPrice - b.originalPrice);\n    }\n    if (sortedField === \"high\") {\n      services = services.sort((a, b) => b.originalPrice - a.originalPrice);\n    }\n    if (sortedField === \"published\") {\n      services = services.filter((item) => item.status === \"show\");\n    }\n    if (sortedField === \"unPublished\") {\n      services = services.filter((item) => item.status === \"hide\");\n    }\n    if (sortedField === \"status-selling\") {\n      services = services.filter((item) => item.quantity > 0);\n    }\n    if (sortedField === \"status-out-of-stock\") {\n      services = services.filter((item) => item.quantity === 0);\n    }\n    if (sortedField === \"date-added-asc\") {\n      services = services.sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt));\n    }\n    if (sortedField === \"date-added-desc\") {\n      services = services.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\n    }\n    if (sortedField === \"date-updated-asc\") {\n      services = services.sort((a, b) => new Date(a.updatedAt) - new Date(b.updatedAt));\n    }\n    if (sortedField === \"date-updated-desc\") {\n      services = services.sort((a, b) => new Date(b.updatedAt) - new Date(a.updatedAt));\n    }\n    if (searchText) {\n      services = services.filter((search) =>\n        search?.title?.toLowerCase().includes(searchText.toLowerCase())\n      );\n    }\n\n    // if (filter === \"All\") {\n    //   // Reset services to original data\n    //   services = data;\n    // }\n\n    // if (sortedField === \"low\") {\n    //   console.log(\"sorts It\", services)\n    //   services = services.sort((a, b) => a.price < b.price && -1);\n    // }\n    // if (sortedField === \"high\") {\n    //   services = services.sort((a, b) => a.price > b.price && -1);\n    // }\n    // if (sortedField === \"date-added-asc\") {\n    //   services = services.filter((item) => item.createdAt === 0);\n    // }\n\n    if (attributeTitle) {\n      services = services.filter(\n        (search) =>\n          search?.title[lang]\n            ?.toLowerCase()\n            ?.includes(attributeTitle?.toLowerCase()) ||\n          search?.attribute\n            ?.toLowerCase()\n            .includes(attributeTitle?.toLowerCase())\n      );\n    }\n\n    // original Logics of categories before\n    // if (categoryType) {\n    //   services = services.filter(\n    //     (search) =>\n    //       search?.parent[lang]\n    //         ?.toLowerCase()\n    //         ?.includes(categoryType?.toLowerCase()) ||\n    //       search?.category?.toLowerCase().includes(categoryType?.toLowerCase())\n    //   );\n    // }\n\n\n    // if (categoryType) {\n    //   services = services.filter(\n    //     (search) => {\n    //       const parentCategory = search?.name[lang]?.toLowerCase();\n    //       const category = search?.category?.toLowerCase();\n    //       const searchValue = categoryType?.toLowerCase();\n    //       const parentCategoryIncludes = parentCategory?.includes(searchValue);\n    //       const categoryIncludes = category?.includes(searchValue);\n\n    //       console.log(\"Parent Category:\", parentCategory);\n    //       console.log(\"Category:\", category);\n    //       console.log(\"Search Value:\", searchValue);\n    //       console.log(\"Parent Category Includes:\", parentCategoryIncludes);\n    //       console.log(\"Category Includes:\", categoryIncludes);\n\n    //       return parentCategoryIncludes || categoryIncludes;\n    //     }\n    //   );\n    // }\n\n\n    // just added to test the datas replace with original logic when needed\n    if (categoryType) {\n      services = services.filter(category => {\n        const { parent, children } = category;\n        const lowercaseCategoryType = categoryType.toLowerCase();\n\n        console.log(\"Category:\", category);\n        console.log(\"Lowercase Category Type:\", lowercaseCategoryType);\n\n        // Check if the parent category matches\n        if (parent && parent.toLowerCase().includes(lowercaseCategoryType)) {\n          console.log(\"Parent Category Matched:\", parent);\n          return true;\n        }\n\n        // Check if any of the children categories match\n        if (children && children.some(child => child.toLowerCase().includes(lowercaseCategoryType))) {\n          console.log(\"Child Category Matched:\", children);\n          return true;\n        }\n\n        return false;\n      });\n    }\n\n\n\n\n    //admin Filtering\n    // if (role) {\n    //   services = services.filter((staff) => staff.role === role);\n    // }\n    // Added By : Govinda 3/5/2024\n    // for all to select and makes it show all insteads\n    if (role && role !== \"All\") {\n      services = services.filter((staff) => staff.role === role);\n      console.log(\"hi: \", services)\n    }\n    //User and Admin filtering\n    if (searchUser) {\n      services = services.filter(\n        (search) =>\n          search?.name[lang]\n            ?.toLowerCase()\n            .includes(searchUser.toLowerCase()) ||\n          search?.phone?.toLowerCase().includes(searchUser.toLowerCase()) ||\n          search?.email?.toLowerCase().includes(searchUser.toLowerCase())\n      );\n    }\n\n    //Coupon filtering\n    if (searchCoupon) {\n      services = services?.filter(\n        (search) =>\n          search?.title[lang]\n            ?.toLowerCase()\n            ?.includes(searchCoupon?.toLowerCase()) ||\n          search?.couponCode\n            ?.toLowerCase()\n            .includes(searchCoupon?.toLowerCase())\n      );\n    }\n    // order filtering\n    // if (status) {\n    // Added By : Govinda 05/3/2024 just for Sorting It All\n    if (status && status !== \"Status\") {\n      services = services.filter((order) => order.status === status);\n    }\n    if (searchOrder) {\n      services = services.filter((order) =>\n        // Added By : Govinda 04/23/2024 just for thiss dataa\n        order.user_info.name.toLowerCase().includes(searchOrder.toLowerCase())\n      );\n    }\n    // Added By : Govinda 05/3/2024 just for Sorting It All\n    // if (time) {\n    if (time && time !== \"Order limits\") {\n      services = services.filter((order) =>\n        dayjs(order.createdAt).isBetween(date, new Date())\n      );\n    }\n\n    if (startDate && endDate) {\n      const startDateObj = new Date(startDate);\n      const endDateObj = new Date(endDate);\n\n      services = services.filter((order) =>\n        dayjs(order.createdAt).isBetween(startDateObj, endDateObj)\n      );\n\n      console.log(\"datess herees :\", services)\n    }\n    // if (startDate && endDate) {\n    //   services = services.filter((order) =>\n    //     dayjs(order.createdAt).isBetween(startDate, endDate)\n    //   );\n    // }\n    // if (startDate) {\n    //   // Calculate the end date as the current date\n    //   const currentDate = new Date();\n    //   // Filter services based on the range from startDate to currentDate\n    //   services = services.filter((order) =>\n    //     dayjs(order.createdAt).isBetween(startDate, currentDate)\n    //   );\n    // }\n\n    // if (endDate) {\n    //   // Calculate the end date as the current date\n    //   const currentDate = new Date();\n    //   // Filter services based on the range from startDate to currentDate\n    //   services = services.filter((order) =>\n    //     dayjs(order.createdAt).isBetween(endDate, currentDate)\n    //   );\n    // }\n\n\n    //country filtering\n    if (country) {\n      services = services.filter(\n        (cou) =>\n          cou?.name?.toLowerCase().includes(country.toLowerCase()) ||\n          cou?.iso_code?.toLowerCase().includes(country.toLowerCase())\n      );\n    }\n\n    //shipping filtering\n    if (shipping) {\n      services = services.filter((ship) =>\n        ship?.name.toLowerCase().includes(shipping.toLowerCase())\n      );\n    }\n\n    // previous Logics\n\n    //language filtering\n    // if (language) {\n    //   services = services.filter(\n    //     (lan) =>\n    //       lan.name.toLowerCase().includes(language.toLowerCase()) ||\n    //       lan.iso_code.toLowerCase().includes(language.toLowerCase()) ||\n    //       lan.language_code.toLowerCase().includes(language.toLowerCase())\n    //   );\n    // }\n\n    // Added By : Govinda 4/04/2024\n\n    if (language) {\n      services = services.filter((lan) => {\n        const name = lan.name ? lan.name.toLowerCase() : '';\n        const isoCode = lan.iso_code ? lan.iso_code.toLowerCase() : '';\n        const languageCode = lan.language_code ? lan.language_code.toLowerCase() : '';\n\n        return name.includes(language.toLowerCase()) ||\n          isoCode.includes(language.toLowerCase()) ||\n          languageCode.includes(language.toLowerCase());\n      });\n    }\n    // Added By : Govinda 4/04/2024\n\n    if (currency) {\n      services = services.filter((cur) => {\n        const isoCode = cur && cur.name ? cur.name.toLowerCase() : '';\n        return isoCode.includes(currency.toLowerCase());\n      });\n    }\n\n    // previous Logics\n\n    // if (currency) {\n    //   services = services.filter((cur) =>\n    //     cur.iso_code.toLowerCase().includes(currency.toLowerCase())\n    //   );\n    // }\n    // console.log(\"services : \", services)\n    return services;\n  }, [\n    time,\n    data,\n    location.pathname,\n    filter,\n    sortedField,\n    searchText,\n    attributeTitle,\n    categoryType,\n    role,\n    searchUser,\n    searchCoupon,\n    status,\n    searchOrder,\n    country,\n    shipping,\n    language,\n    currency,\n    globalSetting?.default_time_zone,\n    lang,\n  ]);\n\n  //pagination functionality start\n  // const resultsPerPage = 10;\n  const totalResults = serviceData?.length;\n  // console.log(\"hi from filters : \", totalResults)\n  const handleChangePage = (p) => {\n    console.log('Changing page to:', p);\n    setCurrentPage(p);\n    // setResultsPerPage(p);\n  };\n  // original Logics\n\n  // useEffect(() => {\n  //   console.log(\"Running useEffect for pagination\");\n  //   console.log(\"Current Page:\", currentPage);\n  //   console.log(\"Results Per Page:\", resultsPerPage);\n  //   setDataTable(\n  //     serviceData?.slice(\n  //       (currentPage - 1) * resultsPerPage,\n  //       currentPage * resultsPerPage\n  //     )\n  //   );\n  // }, [serviceData, currentPage, resultsPerPage]);\n  // useEffect(() => {\n  //   if (searchText) {\n  //     setDataTable(serviceData);\n  //     setCurrentPage(1); // Set currentPage to 1 when filters or searchText change\n  //     setResultsPerPage(serviceData?.length || 1); // Set resultsPerPage to the length of serviceData\n  //   } else {\n  //     const totalResults = serviceData?.length || 0;\n  //     const startIndex = Math.min((currentPage - 1) * resultsPerPage + 1, totalResults);\n  //     const endIndex = Math.min(currentPage * resultsPerPage, totalResults);\n  //     setDataTable(serviceData?.slice(startIndex - 1, endIndex) || []);\n  //   }\n  // }, [\n  //   serviceData,\n  //   currentPage,\n  //   resultsPerPage,\n  //   filter,\n  //   sortedField,\n  //   searchText,\n  //   attributeTitle,\n  //   categoryType,\n  //   role,\n  //   searchUser,\n  //   searchCoupon,\n  //   status,\n  //   searchOrder,\n  //   country,\n  //   shipping,\n  //   language,\n  //   currency,\n  // ]);\n  // useEffect(() => {\n  //   if (searchText) {\n  //     // Reset currentPage to 1 when searchText changes\n  //     setCurrentPage(1);\n  //     // Update resultsPerPage based on the length of filtered data\n  //     setResultsPerPage(serviceData?.length || 1);\n  //     // Set the data table to display the filtered results\n  //     setDataTable(serviceData);\n  //   } else {\n  //     // Calculate totalResults and pagination range when searchText is empty\n  //     const totalResults = serviceData?.length || 0;\n  //     const startCount = Math.min((currentPage - 1) * resultsPerPage + 1, totalResults);\n  //     const endCount = Math.min(currentPage * resultsPerPage, totalResults);\n  //     const displayText = `SHOWING ${startCount}-${endCount} OF ${totalResults}`;\n  //     console.log(displayText);\n  //     // Update data table to display the current page of results\n  //     setDataTable(serviceData?.slice(startCount - 1, endCount) || []);\n  //   }\n  // }, [searchText, serviceData, currentPage, resultsPerPage, setCurrentPage, setResultsPerPage, setDataTable]);\n\n\n  useEffect(() => {\n    let slicedData;\n    if (serviceData?.length > 0) {\n      const startIndex = (currentPage - 1) * resultsPerPage;\n      const endIndex = Math.min(currentPage * resultsPerPage, serviceData?.length);\n      slicedData = serviceData.slice(startIndex, endIndex);\n    } else {\n      slicedData = serviceData;\n    }\n    // if (filter === \"All\") {\n    //   setResultsPerPage(10);\n    //   setDataTable(slicedData);\n    // }\n    const filtersActive =\n      // filter ||\n      // sortedField ||\n      attributeTitle ||\n      categoryType ||\n      // role ||\n      searchUser ||\n      searchCoupon ||\n      status ||\n      searchOrder ||\n      country ||\n      shipping ||\n      language ||\n      // sortedField ||\n      currency;\n\n    if (filtersActive || searchText) {\n      setCurrentPage(1);\n      setResultsPerPage(serviceData?.length || 1);\n      setDataTable(serviceData);\n    } else {\n      setResultsPerPage(10);\n      setDataTable(slicedData);\n    }\n  }, [\n    serviceData,\n    currentPage,\n    resultsPerPage,\n    filter,\n    sortedField,\n    searchText,\n    attributeTitle,\n    categoryType,\n    role,\n    searchUser,\n    searchCoupon,\n    status,\n    searchOrder,\n    country,\n    shipping,\n    language,\n    currency,\n  ]);\n\n\n  useEffect(() => {\n    const totalResults = serviceData?.length || 0;\n    const endCount = Math.min(currentPage * resultsPerPage, totalResults);\n    const startCount = endCount > 0 ? Math.min((currentPage - 1) * resultsPerPage + 1, totalResults) : 0;\n    const displayText = `SHOWING ${startCount}-${endCount} OF ${totalResults}`;\n    // console.log(displayText);\n  }, [serviceData, currentPage, resultsPerPage]);\n\n\n\n\n\n  // useEffect(() => {\n  //   if (searchText) {\n  //     setDataTable(serviceData);\n  //     setCurrentPage(1);\n  //     setResultsPerPage(Math.min(resultsPerPage, serviceData?.length));\n  //   } else {\n  //     const startIndex = Math.min(\n  //       (currentPage - 1) * resultsPerPage,\n  //       serviceData?.length - 1\n  //     );\n  //     const endIndex = Math.min(currentPage * resultsPerPage, serviceData?.length);\n  //     setDataTable(serviceData?.slice(startIndex, endIndex));\n  //   }\n  // }, [\n  //   serviceData,\n  //   currentPage,\n  //   resultsPerPage,\n  //   filter,\n  //   sortedField,\n  //   searchText,\n  //   attributeTitle,\n  //   categoryType,\n  //   role,\n  //   searchUser,\n  //   searchCoupon,\n  //   status,\n  //   searchOrder,\n  //   country,\n  //   shipping,\n  //   language,\n  //   currency,\n  // ]);\n\n  // useEffect(() => {\n  //   setDataTable(\n  //     serviceData?.slice(\n  //       (currentPage - 1) * resultsPerPage,\n  //       currentPage * resultsPerPage\n  //     )\n  //   );\n  // }, [serviceData, currentPage, resultsPerPage]);\n\n  //pagination functionality end\n\n  // useEffect(() => {\n  //   let slicedData;\n  //   if (serviceData?.length > 0 && !searchText) { // Only slice when not searching\n  //     const startIndex = (currentPage - 1) * resultsPerPage;\n  //     const endIndex = Math.min(currentPage * resultsPerPage, serviceData.length);\n  //     slicedData = serviceData.slice(startIndex, endIndex);\n  //   } else {\n  //     slicedData = serviceData; // Keep the data as is if it's empty or when searching\n  //   }\n  //   setDataTable(slicedData);\n  // }, [serviceData, currentPage, resultsPerPage, searchText]);\n\n  // working logic with searching and reflectings in the datatables\n\n  // useEffect(() => {\n  //   let slicedData;\n  //   if (serviceData?.length > 0) {\n  //     const startIndex = (currentPage - 1) * resultsPerPage;\n  //     const endIndex = Math.min(currentPage * resultsPerPage, serviceData.length);\n  //     slicedData = serviceData.slice(startIndex, endIndex);\n  //   } else {\n  //     slicedData = serviceData;\n  //   }\n  //   const filtersActive =\n  //     filter ||\n  //     sortedField ||\n  //     attributeTitle ||\n  //     categoryType ||\n  //     role ||\n  //     searchUser ||\n  //     searchCoupon ||\n  //     status ||\n  //     searchOrder ||\n  //     country ||\n  //     shipping ||\n  //     language ||\n  //     currency;\n\n  //   if (filtersActive || searchText) {\n  //     setDataTable(serviceData);\n  //   } else {\n  //     setDataTable(slicedData);\n  //   }\n  // }, [\n  //   serviceData,\n  //   currentPage,\n  //   resultsPerPage,\n  //   filter,\n  //   sortedField,\n  //   searchText,\n  //   attributeTitle,\n  //   categoryType,\n  //   role,\n  //   searchUser,\n  //   searchCoupon,\n  //   status,\n  //   searchOrder,\n  //   country,\n  //   shipping,\n  //   language,\n  //   currency,\n  // ]);\n\n  // useEffect(() => {\n  //   let slicedData;\n  //   if (serviceData?.length > 0) {\n  //     const startIndex = (currentPage - 1) * resultsPerPage;\n  //     const endIndex = Math.min(currentPage * resultsPerPage, serviceData?.length);\n  //     slicedData = serviceData.slice(startIndex, endIndex);\n  //   } else {\n  //     slicedData = serviceData;\n  //   }\n  //   const filtersActive =\n  //     filter ||\n  //     sortedField ||\n  //     attributeTitle ||\n  //     categoryType ||\n  //     role ||\n  //     searchUser ||\n  //     searchCoupon ||\n  //     status ||\n  //     searchOrder ||\n  //     country ||\n  //     shipping ||\n  //     language ||\n  //     currency;\n\n  //   if (filtersActive || searchText) {\n  //     setDataTable(serviceData);\n  //     setCurrentPage(0); // Set currentPage to 1 when filters or searchText change\n  //   } else {\n  //     setDataTable(slicedData);\n  //   }\n  // }, [\n  //   serviceData,\n  //   currentPage,\n  //   resultsPerPage,\n  //   filter,\n  //   sortedField,\n  //   searchText,\n  //   attributeTitle,\n  //   categoryType,\n  //   role,\n  //   searchUser,\n  //   searchCoupon,\n  //   status,\n  //   searchOrder,\n  //   country,\n  //   shipping,\n  //   language,\n  //   currency,\n  // ]);\n\n  // useEffect(() => {\n  //   let slicedData;\n  //   if (serviceData?.length > 0) {\n  //     const startIndex = (currentPage - 1) * resultsPerPage;\n  //     const endIndex = Math.min(currentPage * resultsPerPage, serviceData?.length);\n  //     slicedData = serviceData.slice(startIndex, endIndex);\n  //   } else {\n  //     slicedData = serviceData;\n  //   }\n  //   const filtersActive =\n  //     filter ||\n  //     sortedField ||\n  //     attributeTitle ||\n  //     categoryType ||\n  //     role ||\n  //     searchUser ||\n  //     searchCoupon ||\n  //     status ||\n  //     searchOrder ||\n  //     country ||\n  //     shipping ||\n  //     language ||\n  //     currency;\n\n  //   if (filtersActive || searchText) {\n  //     setDataTable(serviceData);\n  //     setCurrentPage(1); // Set currentPage to 1 when filters or searchText change\n  //   } else {\n  //     setDataTable(slicedData);\n  //   }\n  // }, [\n  //   serviceData,\n  //   currentPage,\n  //   resultsPerPage,\n  //   filter,\n  //   sortedField,\n  //   searchText,\n  //   attributeTitle,\n  //   categoryType,\n  //   role,\n  //   searchUser,\n  //   searchCoupon,\n  //   status,\n  //   searchOrder,\n  //   country,\n  //   shipping,\n  //   language,\n  //   currency,\n  // ]);\n\n\n\n\n\n  // useEffect(() => {\n  //   let slicedData;\n  //   if (serviceData?.length > 0) {\n  //     const startIndex = currentPage === 1 ? 0 : (currentPage - 1) * resultsPerPage;\n  //     const endIndex = Math.min(currentPage * resultsPerPage, serviceData?.length);\n  //     slicedData = serviceData.slice(startIndex, endIndex);\n  //   } else {\n  //     slicedData = serviceData;\n  //   }\n  //   const filtersActive =\n  //     filter ||\n  //     sortedField ||\n  //     attributeTitle ||\n  //     categoryType ||\n  //     role ||\n  //     searchUser ||\n  //     searchCoupon ||\n  //     status ||\n  //     searchOrder ||\n  //     country ||\n  //     shipping ||\n  //     language ||\n  //     currency;\n\n  //   if (filtersActive || searchText) {\n  //     setDataTable(serviceData);\n  //     // setCurrentPage(1); // Set currentPage to 1 when filters or searchText change\n  //   } else {\n  //     setDataTable(slicedData);\n  //   }\n  // }, [\n  //   serviceData,\n  //   currentPage,\n  //   resultsPerPage,\n  //   filter,\n  //   sortedField,\n  //   searchText,\n  //   attributeTitle,\n  //   categoryType,\n  //   role,\n  //   searchUser,\n  //   searchCoupon,\n  //   status,\n  //   searchOrder,\n  //   country,\n  //   shipping,\n  //   language,\n  //   currency,\n  // ]);\n\n\n  //table form submit function for search start\n  const handleSubmitForAll = (e) => {\n    console.log(\"hi: \", searchRef.current.value)\n    e.preventDefault();\n    setSearchText(searchRef.current.value);\n    setCurrentPage(1);\n    // handleChangePage(0);// Reset current page to 1 after search\n    // setResultsPerPage(setCurrentPage);\n  };\n  const handleSubmitUser = (e) => {\n    e.preventDefault();\n    setSearchUser(userRef.current.value);\n  };\n  const handleSubmitCoupon = (e) => {\n    e.preventDefault();\n    // console.log(\"hi : \", couponRef.current.value)\n    setSearchCoupon(couponRef.current.value);\n  };\n  const handleSubmitOrder = (e) => {\n    // console.log(\"hi : \", orderRef.current.value)\n    e.preventDefault();\n    setSearchOrder(orderRef.current.value);\n  };\n  const handleSubmitCategory = (e) => {\n    console.log(\"hi : \", categoryRef.current.value)\n    e.preventDefault();\n    setCategoryType(categoryRef.current.value);\n  };\n  const handleSubmitAttribute = (e) => {\n    e.preventDefault();\n    setAttributeTitle(attributeRef.current.value);\n  };\n\n  const handleSubmitCountry = (e) => {\n    e.preventDefault();\n    setCountry(countryRef.current.value);\n  };\n\n  const handleSubmitShipping = (e) => {\n    e.preventDefault();\n    setShipping(shippingRef.current.value);\n  };\n  const handleSubmitLanguage = (e) => {\n    e.preventDefault();\n    setLanguage(languageRef.current.value);\n  };\n  const handleSubmitCurrency = (e) => {\n    e.preventDefault();\n    setCurrency(currencyRef.current.value);\n  };\n  // table form submit function for search end\n  // handle submit multiple product data with csv format\n  const handleOnDrop = (data) => {\n    for (let i = 0; i < data.length; i++) {\n      newProducts.push(data[i].data);\n    }\n  };\n  const handleUploadProducts = () => {\n    if (newProducts.length < 1) {\n      notifyError(\"Please upload/select csv file first!\");\n    } else {\n      // notifySuccess('CRUD operation disable for demo!');\n      ProductServices.addAllProducts(newProducts)\n        .then((res) => {\n          notifySuccess(res.message);\n        })\n        .catch((err) => notifyError(err.message));\n    }\n  };\n  const handleSelectFile = (e) => {\n    e.preventDefault();\n\n    const fileReader = new FileReader();\n    const file = e.target?.files[0];\n\n    if (file && file.type === \"application/json\") {\n      setFileName(file?.name);\n      setIsDisable(true);\n\n      fileReader.readAsText(file, \"UTF-8\");\n      fileReader.onload = (e) => {\n        let text = JSON.parse(e.target.result);\n\n        let data = [];\n        if (location.pathname === \"/categories\") {\n          data = text.map((value) => {\n            return {\n              _id: value._id,\n              id: value.id,\n              status: value.status,\n              name: value.name,\n              description: value.description,\n              parentName: value.parentName,\n              parentId: value.parentId,\n              icon: value.icon,\n            };\n          });\n        }\n        if (location.pathname === \"/attributes\") {\n          data = text.map((value) => {\n            return {\n              _id: value._id,\n              status: value.status,\n              title: value.title,\n              name: value.name,\n              variants: value.variants,\n              option: value.option,\n              type: value.type,\n            };\n          });\n        }\n\n        if (location.pathname === \"/coupons\") {\n          data = text.map((value) => {\n            return {\n              title: value.title,\n              couponCode: value.couponCode,\n              endTime: value.endTime,\n              discountPercentage: value.discountPercentage,\n              minimumAmount: value.minimumAmount,\n              productType: value.productType,\n              logo: value.logo,\n              discountType: value.discountType,\n              status: value.status,\n            };\n          });\n        }\n        if (location.pathname === \"/customers\") {\n          data = text.map((value) => {\n            return {\n              name: value.name,\n              email: value.email,\n              password: value.password,\n              phone: value.phone,\n            };\n          });\n        }\n        setSelectedFile(data);\n      };\n    } else if (file && file.type === \"text/csv\") {\n      setFileName(file?.name);\n      setIsDisable(true);\n\n      fileReader.onload = async (event) => {\n        const text = event.target.result;\n        const json = await csvToJson().fromString(text);\n        console.log(\"json\", json);\n        let data = [];\n\n        if (location.pathname === \"/categories\") {\n          data = json.map((value) => {\n            return {\n              _id: value._id,\n              id: value.id,\n              status: value.status,\n              name: JSON.parse(value.name),\n              description: JSON.parse(value.description),\n              parentName: value.parentName,\n              parentId: value.parentId,\n              icon: value.icon,\n            };\n          });\n        }\n        if (location.pathname === \"/attributes\") {\n          data = json.map((value) => {\n            return {\n              status: value.status,\n              title: JSON.parse(value.title),\n              name: JSON.parse(value.name),\n              variants: JSON.parse(value.variants),\n              option: value.option,\n              type: value.type,\n            };\n          });\n        }\n\n        if (location.pathname === \"/coupons\") {\n          data = json.map((value) => {\n            return {\n              title: JSON.parse(value.title),\n              couponCode: value.couponCode,\n              endTime: value.endTime,\n              discountPercentage: value.discountPercentage\n                ? JSON.parse(value.discountPercentage)\n                : 0,\n              minimumAmount: value.minimumAmount\n                ? JSON.parse(value.minimumAmount)\n                : 0,\n              productType: value.productType,\n              logo: value.logo,\n              // discountType: JSON.parse(value.discountType),\n              status: value.status,\n            };\n          });\n        }\n        if (location.pathname === \"/customers\") {\n          data = json.map((value) => {\n            return {\n              name: value.name,\n              email: value.email,\n              password: value.password,\n              phone: value.phone,\n            };\n          });\n        }\n        setSelectedFile(data);\n      };\n      fileReader.readAsText(file);\n    } else {\n      setFileName(file?.name);\n      setIsDisable(true);\n\n      const rABS = !!fileReader.readAsBinaryString;\n\n      fileReader.onload = function (event) {\n        /* Parse data */\n        const bstr = event.target.result;\n        const wb = XLSX.read(bstr, {\n          type: rABS ? \"binary\" : \"array\",\n          bookVBA: true,\n        });\n        /* Get first worksheet */\n        const wsname = wb.SheetNames[0];\n        const ws = wb.Sheets[wsname];\n        /* Convert array of arrays */\n        const json = XLSX.utils.sheet_to_json(ws);\n\n        let data = [];\n\n        if (location.pathname === \"/categories\") {\n          data = json.map((value) => {\n            return {\n              _id: value._id,\n              id: value.id,\n              status: value.status,\n              name: JSON.parse(value.name),\n              description: JSON.parse(value.description),\n              parentName: value.parentName,\n              parentId: value.parentId,\n              icon: value.icon,\n            };\n          });\n        }\n        if (location.pathname === \"/attributes\") {\n          data = json.map((value) => {\n            return {\n              status: value.status,\n              title: JSON.parse(value.title),\n              name: JSON.parse(value.name),\n              variants: JSON.parse(value.variants),\n              option: value.option,\n              type: value.type,\n            };\n          });\n        }\n\n        if (location.pathname === \"/coupons\") {\n          data = json.map((value) => {\n            return {\n              title: JSON.parse(value.title),\n              couponCode: value.couponCode,\n              endTime: value.endTime,\n              discountPercentage: value.discountPercentage,\n              minimumAmount: value.minimumAmount,\n              productType: value.productType,\n              logo: value.logo,\n              // discountType: JSON.parse(value.discountType),\n              status: value.status,\n            };\n          });\n        }\n        if (location.pathname === \"/customers\") {\n          data = json.map((value) => {\n            return {\n              name: value.name,\n              email: value.email,\n              password: value.password ? value.password : \"null\",\n              phone: value.phone ? value.phone : \"null\",\n            };\n          });\n        }\n        setSelectedFile(data);\n      };\n\n      if (rABS) {\n        fileReader.readAsBinaryString(file);\n      } else {\n        fileReader.readAsArrayBuffer(file);\n      }\n    }\n  };\n\n  const handleUploadMultiple = (e) => {\n    notifyError(\"This feature is disabled for demo!\");\n    // return;\n    // console.log('select file', selectedFile, location.pathname);\n    if (selectedFile.length > 1) {\n      if (location.pathname === \"/categories\") {\n        setLoading(true);\n        let categoryDataValidation = selectedFile.map((value) =>\n          ajv.validate(categorySchema, value)\n        );\n\n        const isBelowThreshold = (currentValue) => currentValue === true;\n        const validationData = categoryDataValidation.every(isBelowThreshold);\n\n        if (validationData) {\n          CategoryServices.addAllCategory(selectedFile)\n            .then((res) => {\n              setLoading(false);\n              setIsUpdate(true);\n              notifySuccess(res.message);\n            })\n            .catch((err) => {\n              setLoading(false);\n              notifyError(err ? err.response.data.message : err.message);\n            });\n        } else {\n          notifyError(\"Please enter valid data!\");\n        }\n      }\n      if (location.pathname === \"/customers\") {\n        setLoading(true);\n        let customerDataValidation = selectedFile.map((value) =>\n          ajv.validate(customerSchema, value)\n        );\n\n        const isBelowThreshold = (currentValue) => currentValue === true;\n        const validationData = customerDataValidation.every(isBelowThreshold);\n\n        console.log(validationData);\n        console.log(customerDataValidation);\n\n        if (validationData) {\n          CustomerServices.addAllCustomers(selectedFile)\n            .then((res) => {\n              setLoading(false);\n              setIsUpdate(true);\n              notifySuccess(res.message);\n            })\n            .catch((err) => {\n              setLoading(false);\n              notifyError(err ? err.response.data.message : err.message);\n            });\n        } else {\n          notifyError(\"Please enter valid data!\");\n        }\n      }\n      if (location.pathname === \"/coupons\") {\n        setLoading(true);\n        let attributeDataValidation = selectedFile.map((value) =>\n          ajv.validate(couponSchema, value)\n        );\n\n        const isBelowThreshold = (currentValue) => currentValue === true;\n        const validationData = attributeDataValidation.every(isBelowThreshold);\n\n        if (validationData) {\n          CouponServices.addAllCoupon(selectedFile)\n            .then((res) => {\n              setLoading(false);\n              setIsUpdate(true);\n              notifySuccess(res.message);\n            })\n            .catch((err) => {\n              setLoading(false);\n              notifyError(err ? err.response.data.message : err.message);\n            });\n        } else {\n          notifyError(\"Please enter valid data!\");\n        }\n      }\n      if (location.pathname === \"/attributes\") {\n        setLoading(true);\n        let attributeDataValidation = selectedFile.map((value) =>\n          ajv.validate(attributeSchema, value)\n        );\n\n        const isBelowThreshold = (currentValue) => currentValue === true;\n        const validationData = attributeDataValidation.every(isBelowThreshold);\n\n        if (validationData) {\n          AttributeServices.addAllAttributes(selectedFile)\n            .then((res) => {\n              setLoading(false);\n              setIsUpdate(true);\n              notifySuccess(res.message);\n            })\n            .catch((err) => {\n              setLoading(false);\n              notifyError(err ? err.response.data.message : err.message);\n            });\n        } else {\n          notifyError(\"Please enter valid data!\");\n        }\n      }\n\n      if (location.pathname === \"/languages\") {\n        LanguageServices.addAllLanguage(selectedFile)\n          .then((res) => {\n            setIsUpdate(true);\n            notifySuccess(res.message);\n          })\n          .catch((err) =>\n            notifyError(err ? err.response.data.message : err.message)\n          );\n      }\n\n      if (location.pathname === \"/currencies\") {\n        CurrencyServices.addAllCurrency(selectedFile)\n          .then((res) => {\n            setIsUpdate(true);\n            notifySuccess(res.message);\n          })\n          .catch((err) =>\n            notifyError(err ? err.response.data.message : err.message)\n          );\n      }\n    } else {\n      notifyError(\"Please select a valid .JSON/.CSV/.XLS file first!\");\n    }\n  };\n\n  const handleRemoveSelectFile = (e) => {\n    // console.log('remove');\n    setFileName(\"\");\n    setSelectedFile([]);\n    setTimeout(() => setIsDisable(false), 1000);\n  };\n\n  return {\n    userRef,\n    searchRef,\n    couponRef,\n    orderRef,\n    categoryRef,\n    attributeRef,\n    pending,\n    processing,\n    delivered,\n    todayOrder,\n    monthlyOrder,\n    totalOrder,\n    setFilter,\n    setSortedField,\n    setStatus,\n    setRole,\n    time,\n    setTime,\n    handleChangePage,\n    totalResults,\n    resultsPerPage,\n    dataTable,\n    serviceData,\n    handleSubmitUser,\n    handleSubmitForAll,\n    handleSubmitCoupon,\n    handleSubmitOrder,\n    handleSubmitCategory,\n    handleSubmitAttribute,\n    handleOnDrop,\n    handleUploadProducts,\n    countryRef,\n    country,\n    setCountry,\n    zone,\n    setZone,\n    startDate,\n    setStartDate,\n    endDate,\n    setEndDate,\n    handleSubmitCountry,\n    languageRef,\n    handleSubmitLanguage,\n    handleSelectFile,\n    handleUploadMultiple,\n    filename,\n    isDisabled,\n    handleRemoveSelectFile,\n    taxRef,\n    currencyRef,\n    handleSubmitCurrency,\n    handleSubmitShipping,\n    shippingRef,\n    globalSetting,\n    currentPage,\n  };\n};\n\nexport default useFilter;\n"],"sourceRoot":""}